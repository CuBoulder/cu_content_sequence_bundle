<?php
/**
 * @file
 * Code for the Timeline feature.
 */

include_once 'cu_timeline.features.inc';

function cu_timeline_style_options() {
  return array(
    'horizontal' => 'Horizontal',
    'vertical' => 'Vertical',
  );
}

function cu_timeline_date_display_options() {

  $options = array();
  $options['day'] = 'Day: ' . date('F j, Y');
  $options['month'] = 'Month: ' . date('F Y');
  $options['year'] = 'Year: ' . date('Y');
  $options['hidden'] = 'Hidden';

  return $options;
}

function cu_timeline_menu() {
  $items = array();
  $items['timeline/view/%cu_timeline'] = array(
    'title' => 'View All Dates',
    'page callback' => 'cu_timeline_view_all',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'title callback' => 'cu_timeline_view_all_title_callback',
    'title arguments' => array(2),
  );
  return $items;
}

/**
 * Menu autoloader for /video.
 */
function cu_timeline_load($id) {
  $timeline = bean_load($id);
  return $timeline;
}

function cu_timeline_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'cu_timeline');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'node', $module_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    if (isset($theme_registry[$h]['theme paths'])) {
      $first_element = array_shift($theme_registry[$h]['theme paths']);
      array_unshift($theme_registry[$h]['theme paths'], array_shift($theme_registry[$h]['theme paths']), $module_path);
    }
  }
}

function cu_timeline_preprocess_entity(&$vars) {
  $entity_type = $vars['elements']['#entity_type'];
  $bundle = $vars['elements']['#bundle'];
  // Only preprocess block section beans.
  if ($entity_type == 'bean' && $bundle == 'timeline') {
    $output = '';
    $timeline = array();
    $style = $vars['field_timeline_style'][0]['value'];
    // $style = 'horizontal';
    $vars['theme_hook_suggestions'][] = 'bean__timeline__' . $style;

    //dpm($vars);

    // Find all the field_collection_items.
    if (empty($vars['content']['field_timeline_item'])) {
      return array();
    }
    $children = element_children($vars['content']['field_timeline_item']);
    $i = 0;
    $column_count = 1;
    $timeline_items = array_intersect_key($vars['content']['field_timeline_item'], element_children($vars['content']['field_timeline_item']));

    //dpm($timeline_items);

    $timeline_content = array();
    $dates = array();
    $count = 0;
    foreach ($timeline_items as $timeline_item) {
      $content = array();
      $item = array_pop($timeline_item['entity']['field_collection_item']);

      // short title
      $count++;
      $index = str_pad($count, 4, "0", STR_PAD_LEFT);
      $dates[$index] = $item['field_timeline_item_short_title']['#items'][0]['value'];
      $content['data_date'] = $index;
      $content['short_title'] = $item['field_timeline_item_short_title']['#items'][0]['value'];

      $content['timeline_item_content'] = $item['field_timeline_item_content'];
      /*
      // Get title.
      $content['title'] = $item['field_timeline_item_title']['#items'][0]['title'];


      // Get text content.
      if (!empty($item['field_timeline_item_text'])) {
        $content['body'] = $item['field_timeline_item_text'][0]['#markup'];
      }
      // Get Image
      $size = 'large_wide_thumbnail';
      if (isset($item['field_timeline_image']['#items'][0]['uri'])) {
        // Get image uri.
        $image_uri = $item['field_timeline_image']['#items'][0]['uri'];
        $build = array(
          '#theme' => 'image_style',
          '#style_name' => $size,
          '#path' => $image_uri,
          '#alt' => $item['field_timeline_image']['#items'][0]['alt'],
        );
        $content['image'] = drupal_render($build);
        $image_url = image_style_url($size, $image_uri);

      }

      // Get URL.
      if (!empty($item['field_timeline_item_title']['#items'][0]['url'])) {
        $url = $item['field_timeline_item_title']['#items'][0]['url'];
        $content['title'] = l($content['title'], $url);
        $content['image'] = l($content['image'], $url, array('html' => TRUE));
      }
      */
      $timeline_content[]['#markup'] = theme('timeline_item', array('content' => $content));
    }
    $vars['content']['timeline_items'] = $timeline_content;
    $vars['dates'] = $dates;
  }
}

function cu_timeline_theme(&$existing, $type, $theme, $path) {
  $registry = array();
  $template_dir = drupal_get_path('module', 'cu_timeline') . '/templates';
  $registry['timeline_item'] = array(
    'template' => 'timeline-item',
    'path' => $template_dir,
    'render element' => 'elements',
  );

  return $registry;
}

function _cu_timeline_format_date($date, $granularity_value) {
  $date = strtotime($date);
  if ($granularity_value == 'year') {
    $new_date = date('Y', $date);
  }
  else if ($granularity_value == 'month') {
    if($month == 'September'){
        $output['month'] = 'Sept. ';
    } elseif (strlen($month) > 5){
        $output['month'] = substr($post_date_month, 0,3) . ".";
    } else {
        $output['month'] = $month;
    }
  }

  $month = date('F', $date);

  $output = array();



  return $new_date;
}

function cu_timeline_preprocess_node(&$vars) {
  if ($vars['type'] == 'timeline_item') {
    $original_date = NULL;
    if (!empty($vars['node']->field_timeline_date)) {
      $original_date = $vars['node']->field_timeline_date[LANGUAGE_NONE][0]['value'];
      $newDate = date("d/m/Y", strtotime($original_date)) . 'T' . date("H:i", strtotime($original_date));
      $vars['data_date'] = $newDate;
      $vars['content']['timeline_item_date'] = format_date(strtotime($original_date), 'cu_medium_date');
    }
    else {
      $vars['data_date'] = '';
      $vars['content']['timeline_item_date'] = '';
    }
    if (!empty($vars['node']->field_timeline_date_display)) {
      $display = $vars['node']->field_timeline_date_display[LANGUAGE_NONE][0]['value'];
    } else {
      $display = 'day';
    }
    if ($original_date && ($display != 'hidden')) {
      $displays = array(
        'day' => 'F j, Y',
        'month' => 'F Y',
        'year' => 'Y',
      );
      $vars['content']['timeline_item_date']['#markup'] = date($displays[$display], strtotime($original_date));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove default values from timeline block date range form
 * when creating a new block;
 */
function cu_timeline_form_bean_form_alter(&$form, &$form_state, $form_id) {
  if (($form['bean']['#value']->type == 'timeline1')) {

    if (!$form['bean']['#value']->bid) {
      // Leave datefield default value blank
      unset($form['field_timeline_date_range'][LANGUAGE_NONE][0]['#default_value']);
    }


    $form['timeline_content_population'] = array(
      '#type' => 'fieldset',
      '#title' => 'Timeline Content Population',
      '#weight' => 4,
    );
    $form['timeline_content_population']['field_timeline_content'] = $form['field_timeline_content'];
    unset($form['field_timeline_content']);

    $form['timeline_content_population']['#states'] = array(
      'visible' => array(
        ':input[name="field_timeline_style[und]"]' => array('value' => 'vertical'),
      ),
    );

    $weight = $form['timeline_content_population']['#weight'];
    // Move fields into fieldsets to handle conditionals
    $form['timeline_auto'] = array(
      '#type' => 'fieldset',
      '#title' => 'Timeline Content',
      '#weight' => $weight + .1,
      '#states' => array(
       'visible' => array(
         array(':input[name="field_timeline_content[und]"]' => array('value' => 'auto')),
         'or',
         array(':input[name="field_timeline_style[und]"]' => array('value' => 'horizontal')),
         'or',
         array(':input[name="field_timeline_style[und]"]' => array('value' => 'grid')),
       ),
     ),
    );
    $fields = array(
      'field_timeline_category',
      'field_timeline_granularity',
      'field_timeline_date_range',
    );
    foreach ($fields as $field) {
      $form['timeline_auto'][$field] = $form[$field];
      unset($form[$field]);
    }

    $form['timeline_manual'] = array(
      '#type' => 'fieldset',
      '#title' => 'Timeline Content',
      '#weight' => $weight + .1,
      '#states' => array(
       'visible' => array(
         ':input[name="field_timeline_content[und]"]' => array('value' => 'manual'),
         ':input[name="field_timeline_style[und]"]' => array('value' => 'vertical'),
       ),
     ),
    );
    $fields = array(
      'field_timeline_content_item',
    );
    foreach ($fields as $field) {
      $form['timeline_manual'][$field] = $form[$field];
      unset($form[$field]);
    }
  }
}

function cu_timeline_form_timeline_item_node_form_alter(&$form, &$form_state, $form_id) {
  if (!$form['nid']['#value']) {
    // Leave datefield default value blank
    unset($form['field_timeline_date'][LANGUAGE_NONE][0]['#default_value']);
  }
}


function cu_timeline_view_all_title_callback($timeline = NULL) {
  if ($timeline) {
    return $timeline->title;
  }
}
function cu_timeline_view_all($timeline= NULL) {
  $content = array();
  if ($timeline) {
    $timeline->field_timeline_style[LANGUAGE_NONE][0]['value'] = 'vertical';
    $content['timeline'] = bean_view($timeline);
    $title = !empty($timeline->title) ? $timeline->title : 'View All Timeline Items';
    drupal_set_title($title);
  }
  return $content;
}

/*
 * Implements hook_secure_permissions
 *
 * Adding permissions for timeline bean
 */
function cu_timeline_secure_permissions($role) {
  $permissions = array(
    'anonymous user' => array(
      'view any timeline bean',
    ),
    'authenticated user' => array(
      'view any timeline bean',
    ),
    'administrator' => array(
      'create any timeline bean',
      'delete any timeline bean',
      'edit any timeline bean',
      'view any timeline bean',
    ),
    'content_editor' => array(
      'create any timeline bean',
      'delete any timeline bean',
      'edit any timeline bean',
      'view any timeline bean',
    ),
    'developer' => array(
      'create any timeline bean',
      'delete any timeline bean',
      'edit any timeline bean',
      'view any timeline bean',
    ),
    'site_owner' => array(
      'create any timeline bean',
      'delete any timeline bean',
      'edit any timeline bean',
      'view any timeline bean',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}
