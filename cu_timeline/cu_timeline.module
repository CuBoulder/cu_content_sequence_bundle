<?php
/**
 * @file
 * Code for the Timeline feature.
 */

include_once 'cu_timeline.features.inc';

function cu_timeline_style_options() {
  return array(
    'horizontal' => 'Horizontal',
    'vertical' => 'Vertical',
  );
}

function cu_timeline_date_display_options() {

  $options = array();
  $options['day'] = 'Day: ' . date('F j, Y');
  $options['month'] = 'Month: ' . date('F Y');
  $options['year'] = 'Year: ' . date('Y');
  $options['hidden'] = 'Hidden';

  return $options;
}

function cu_timeline_menu() {
  $items = array();
  $items['timeline/view/%cu_timeline'] = array(
    'title' => 'View All Dates',
    'page callback' => 'cu_timeline_view_all',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'title callback' => 'cu_timeline_view_all_title_callback',
    'title arguments' => array(2),
  );
  return $items;
}

/**
 * Menu autoloader for /video.
 */
function cu_timeline_load($id) {
  $timeline = bean_load($id);
  return $timeline;
}

function cu_timeline_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'cu_timeline');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'node', $module_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    if (isset($theme_registry[$h]['theme paths'])) {
      $first_element = array_shift($theme_registry[$h]['theme paths']);
      array_unshift($theme_registry[$h]['theme paths'], array_shift($theme_registry[$h]['theme paths']), $module_path);
    }
  }
}

function cu_timeline_preprocess_entity(&$vars) {
  $entity_type = $vars['elements']['#entity_type'];
  $bundle = $vars['elements']['#bundle'];
  // Only preprocess block section beans.
  if ($entity_type == 'bean' && $bundle == 'timeline') {
    $output = '';
    $timeline = array();
    $style = $vars['field_timeline_style'][0]['value'];
    $vars['theme_hook_suggestions'][] = 'bean__timeline__' . $style;

    $date_display = $vars['field_timeline_date_display'][0]['value'];
    $view_mode = $vars['field_timeline_content_display'][0]['value'];

    $content = ($style == 'vertical') ? $vars['field_timeline_content'][0]['value'] : 'auto';

    if ($content == 'auto') {
      $dates = array();
      $today = date("Y-m-d H:i:s");

      $query = db_select('node', 'n');
      $query->condition('n.type', 'timeline_item', '=');
      $query->condition('n.status', 1, '=');
      $query->fields('n', array('nid', 'title'));
      $query->join("field_data_field_timeline_date", "date", "n.nid = date.entity_id");
      $query->fields('date', array('field_timeline_date_value'));
      $query->isNotNull('field_timeline_date_value');

      // Check to see if date range set, otherwise show all events from today +
      // If only one date was filled out, date values will be equal
      if (isset($vars['elements']['#entity']->field_timeline_date_range[LANGUAGE_NONE])) {
        $range = $vars['elements']['#entity']->field_timeline_date_range[LANGUAGE_NONE][0];
        if (isset($range['value']) && isset($range['value2']) && ($range['value'] == $range['value2'])) {
          $query->condition('date.field_timeline_date_value', $range['value'], '>=');
        }
        // If two unique dates, show between
        else if (isset($range['value']) && isset($range['value2'])) {
          $date_range[] = $range['value'];
          $date_range[] = $range['value2'];
          $query->condition('date.field_timeline_date_value', $date_range, 'BETWEEN');
        }
      }
      // No dates, show events >= today
      else {
        $query->condition('date.field_timeline_date_value', $today, '>=');
      }
      // Filter by category.
      if (isset($vars['elements']['#entity']->field_timeline_category[LANGUAGE_NONE])) {
        $terms = array();
        foreach ($vars['elements']['#entity']->field_timeline_category[LANGUAGE_NONE] as $key => $value) {
          $tid = $value['tid'];
          $terms[$tid] = $tid;
        }
        $query->join("field_data_field_timeline_category", "cats", "n.nid = cats.entity_id");
        $query->fields('cats', array('field_timeline_category_tid'));
        $query->condition('cats.field_timeline_category_tid', $terms, 'in');
      }

      $query->distinct();
      $query->groupBy('date.field_timeline_date_value');
      $query->groupBy('n.nid');
      // Display the newest first.
      $query->orderBy('field_timeline_date_value', 'ASC');
      $nids = $query->execute()->fetchCol();
      $nodes = node_load_multiple($nids);

      $grouped_output = array();

      $granularity = array(
        'day' => 'd/m/Y',
        'month' => 'm/Y',
        'year' => 'Y',
      );
      $granularity_display = array(
        'day' => 'M j',
        'month' => 'M Y',
        'year' => 'Y',
      );
      $item_granularity_display = array(
        'day' => 'F j, Y',
        'month' => 'F Y',
        'year' => 'Y',
      );

      $granularity_value = $vars['elements']['#entity']->field_timeline_granularity[LANGUAGE_NONE][0]['value'];

      foreach ($nodes as $node) {
        $date = $node->field_timeline_date[LANGUAGE_NONE][0]['value'];
        $data_date = date($granularity[$granularity_value], strtotime($date)) . 'T' . date("H:i", strtotime($date));
        $group_date = date($granularity[$granularity_value], strtotime($date)) . 'T:00:00:00';
        $display_date = date($granularity_display[$granularity_value], strtotime($date));
        $dates[$group_date] = array(
          'date' => $display_date,
          'nid' => $node->nid,
        );
        $grouped_output[$group_date]['#datetime'] = date($item_granularity_display[$granularity_value], strtotime($date));
        if ($date_display != 'hidden') {
          $node->timeline_display_date['date'] = date($item_granularity_display[$date_display], strtotime($date));
        }
        else {
          $node->timeline_display_date['date'] = '';
        }
        $grouped_output[$group_date][$node->nid] = node_view($node, $view_mode);

      }
      $vars['dates'] = $dates;
      $output = array();
      foreach ($grouped_output as $date => $group) {
        if ($style == 'grid') {
          $grouped_output[$date]['#prefix'] = '<li data-date="' . $date . '" class="timeline-single-item"><div class="group-date">' . $group['#datetime'] . '</div>';
        }
        else {
          $grouped_output[$date]['#prefix'] = '<li data-date="' . $date . '" class="timeline-single-item">';
        }
        $grouped_output[$date]['#suffix'] = '</li>';
        $display_date = date($granularity_display[$granularity_value], strtotime($date));
      }
      $timeline = $grouped_output;
    }
    // Manual timeline
    else {
      $items = array();
      $dates = array();
      $grouped_output = array();
      $granularity = array(
        'day' => 'd/m/Y',
        'month' => 'm/Y',
        'year' => 'Y',
      );
      $granularity_display = array(
        'day' => 'M j',
        'month' => 'M Y',
        'year' => 'Y',
      );
      $item_granularity_display = array(
        'day' => 'F j, Y',
        'month' => 'F Y',
        'year' => 'Y',
      );
      $item_count = 1;
      foreach ($vars['field_timeline_content_item'] as $item) {
        if ($date_display == 'visible') {
          $id = $item['target_id'];
          $entity = $item['entity'];
          $date = $entity->field_timeline_date[LANGUAGE_NONE][0]['value'];
          $data_date = date($granularity['day'], strtotime($date)) . 'T' . date("H:i", strtotime($date));
          $group_date = date($granularity['day'], strtotime($date)) . 'T:00:00:00';
          $display_date = date($granularity_display['day'], strtotime($date));
          $dates[$group_date] = array(
            'date' => $display_date,
            'nid' => $entity->nid,
          );
        }
        else {
          $id = $item['target_id'];
          $entity = $item['entity'];

          $date = $entity->field_timeline_date[LANGUAGE_NONE][0]['value'];
          $data_date = date($granularity['day'], strtotime($date)) . 'T' . date("H:i", strtotime($date));
          $group_date = date($granularity['day'], strtotime($date)) . 'T:00:00:00';
          $group_date = '00/00/' . str_pad($item_count, 4, '0', STR_PAD_LEFT) . 'T:00:00:00';

          $display_date = date($granularity_display['day'], strtotime($date));
          $dates[$group_date] = array(
            'date' => '<span class="element-invisible">' . $entity->title . '</span>',
            'nid' => $entity->nid,
          );

          $item_count++;
        }



        $entity->timeline_display_date['date'] = ($date_display == 'visible') ? date($item_granularity_display['day'], strtotime($date)) : NULL;

        $grouped_output[$group_date][] = node_view($entity, $view_mode);
      }


      $vars['dates'] = $dates;
      foreach ($grouped_output as $date => $group) {
        $grouped_output[$date]['#prefix'] = '<li data-date="' . $date . '" class="timeline-single-item">';
        $grouped_output[$date]['#suffix'] = '</li>';
      }
      $timeline = $grouped_output;
    }
    //$vars['content']['timeline_items'] = node_view_multiple($nodes, 'teaser');
    $vars['content']['timeline_items'] = $timeline;
  }
}

function _cu_timeline_format_date($date, $granularity_value) {
  $date = strtotime($date);
  if ($granularity_value == 'year') {
    $new_date = date('Y', $date);
  }
  else if ($granularity_value == 'month') {
    if($month == 'September'){
        $output['month'] = 'Sept. ';
    } elseif (strlen($month) > 5){
        $output['month'] = substr($post_date_month, 0,3) . ".";
    } else {
        $output['month'] = $month;
    }
  }

  $month = date('F', $date);

  $output = array();



  return $new_date;
}

function cu_timeline_preprocess_node(&$vars) {
  if ($vars['type'] == 'timeline_item') {
    $original_date = NULL;
    if (!empty($vars['node']->field_timeline_date)) {
      $original_date = $vars['node']->field_timeline_date[LANGUAGE_NONE][0]['value'];
      $newDate = date("d/m/Y", strtotime($original_date)) . 'T' . date("H:i", strtotime($original_date));
      $vars['data_date'] = $newDate;
      $vars['content']['timeline_item_date'] = format_date(strtotime($original_date), 'cu_medium_date');
    }
    else {
      $vars['data_date'] = '';
      $vars['content']['timeline_item_date'] = '';
    }
    if (!empty($vars['node']->field_timeline_date_display)) {
      $display = $vars['node']->field_timeline_date_display[LANGUAGE_NONE][0]['value'];
    } else {
      $display = 'day';
    }
    if ($original_date && ($display != 'hidden')) {
      $displays = array(
        'day' => 'F j, Y',
        'month' => 'F Y',
        'year' => 'Y',
      );
      $vars['content']['timeline_item_date']['#markup'] = date($displays[$display], strtotime($original_date));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove default values from timeline block date range form
 * when creating a new block;
 */
function cu_timeline_form_bean_form_alter(&$form, &$form_state, $form_id) {
  if (($form['bean']['#value']->type == 'timeline1')) {

    if (!$form['bean']['#value']->bid) {
      // Leave datefield default value blank
      unset($form['field_timeline_date_range'][LANGUAGE_NONE][0]['#default_value']);
    }


    $form['timeline_content_population'] = array(
      '#type' => 'fieldset',
      '#title' => 'Timeline Content Population',
      '#weight' => 4,
    );
    $form['timeline_content_population']['field_timeline_content'] = $form['field_timeline_content'];
    unset($form['field_timeline_content']);

    $form['timeline_content_population']['#states'] = array(
      'visible' => array(
        ':input[name="field_timeline_style[und]"]' => array('value' => 'vertical'),
      ),
    );

    $weight = $form['timeline_content_population']['#weight'];
    // Move fields into fieldsets to handle conditionals
    $form['timeline_auto'] = array(
      '#type' => 'fieldset',
      '#title' => 'Timeline Content',
      '#weight' => $weight + .1,
      '#states' => array(
       'visible' => array(
         array(':input[name="field_timeline_content[und]"]' => array('value' => 'auto')),
         'or',
         array(':input[name="field_timeline_style[und]"]' => array('value' => 'horizontal')),
         'or',
         array(':input[name="field_timeline_style[und]"]' => array('value' => 'grid')),
       ),
     ),
    );
    $fields = array(
      'field_timeline_category',
      'field_timeline_granularity',
      'field_timeline_date_range',
    );
    foreach ($fields as $field) {
      $form['timeline_auto'][$field] = $form[$field];
      unset($form[$field]);
    }

    $form['timeline_manual'] = array(
      '#type' => 'fieldset',
      '#title' => 'Timeline Content',
      '#weight' => $weight + .1,
      '#states' => array(
       'visible' => array(
         ':input[name="field_timeline_content[und]"]' => array('value' => 'manual'),
         ':input[name="field_timeline_style[und]"]' => array('value' => 'vertical'),
       ),
     ),
    );
    $fields = array(
      'field_timeline_content_item',
    );
    foreach ($fields as $field) {
      $form['timeline_manual'][$field] = $form[$field];
      unset($form[$field]);
    }
  }
}

function cu_timeline_form_timeline_item_node_form_alter(&$form, &$form_state, $form_id) {
  if (!$form['nid']['#value']) {
    // Leave datefield default value blank
    unset($form['field_timeline_date'][LANGUAGE_NONE][0]['#default_value']);
  }
}


function cu_timeline_view_all_title_callback($timeline = NULL) {
  if ($timeline) {
    return $timeline->title;
  }
}
function cu_timeline_view_all($timeline= NULL) {
  if ($timeline) {
    $content = array();
    $dates = array();
    if ($timeline->field_timeline_content[LANGUAGE_NONE][0]['value'] == 'auto') {
      $today = date("Y-m-d H:i:s");

      $query = db_select('node', 'n');
      $query->condition('n.type', 'timeline_item', '=');
      $query->condition('n.status', 1, '=');
      $query->fields('n', array('nid', 'title'));
      $query->join("field_data_field_timeline_date", "date", "n.nid = date.entity_id");
      $query->fields('date', array('field_timeline_date_value'));

      // Check to see if date range set, otherwise show all events from today +
      // If only one date was filled out, date values will be equal
      if (isset($timeline->field_timeline_date_range[LANGUAGE_NONE])) {
        $range = $timeline->field_timeline_date_range[LANGUAGE_NONE][0];
        if (isset($range['value']) && isset($range['value2']) && ($range['value'] == $range['value2'])) {
          $query->condition('date.field_timeline_date_value', $range['value'], '>=');
        }
        // If two unique dates, show between
        else if (isset($range['value']) && isset($range['value2'])) {
          $date_range[] = $range['value'];
          $date_range[] = $range['value2'];
          $query->condition('date.field_timeline_date_value', $date_range, 'BETWEEN');
        }
      }
      // No dates, show events >= today
      else {
        $query->condition('date.field_timeline_date_value', $today, '>=');
      }
      // Filter by category.
      if (isset($timeline->field_timeline_category[LANGUAGE_NONE])) {
        $terms = array();
        foreach ($timeline->field_timeline_category[LANGUAGE_NONE] as $key => $value) {
          $tid = $value['tid'];
          $terms[$tid] = $tid;
        }
        $query->join("field_data_field_timeline_category", "cats", "n.nid = cats.entity_id");
        $query->fields('cats', array('field_timeline_category_tid'));
        $query->condition('cats.field_timeline_category_tid', $terms, 'in');
      }

      $query->distinct();
      $query->groupBy('n.nid');
      // Display the newest first.
      $query->orderBy('field_timeline_date_value', 'ASC');
      $nids = $query->execute()->fetchCol();
    }
    else {
      $nids = array();
      foreach ($timeline->field_timeline_content_item[LANGUAGE_NONE] as $key => $value) {
        $nids[$value['target_id']] = $value['target_id'];
      }
    }
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $node) {
      $date = $node->field_timeline_date[LANGUAGE_NONE][0]['value'];
      $display_date = date("F j, Y", strtotime($date));

      $node->timeline_display_date['date'] = $display_date;
    }

    $content['timeline_items'] = node_view_multiple($nodes, 'teaser');
    $content['timeline_items']['#prefix'] = '<div class="timeline-view-all-wrapper">';
    $content['timeline-items']['#suffix'] = '</div>';
  }
  return $content;
}

/*
 * Implements hook_secure_permissions
 *
 * Adding permissions for timeline bean
 */
function cu_timeline_secure_permissions($role) {
  $permissions = array(
    'anonymous user' => array(
      'view any timeline bean',
    ),
    'authenticated user' => array(
      'view any timeline bean',
    ),
    'administrator' => array(
      'create any timeline bean',
      'delete any timeline bean',
      'edit any timeline bean',
      'view any timeline bean',
    ),
    'content_editor' => array(
      'create any timeline bean',
      'delete any timeline bean',
      'edit any timeline bean',
      'view any timeline bean',
    ),
    'developer' => array(
      'create any timeline bean',
      'delete any timeline bean',
      'edit any timeline bean',
      'view any timeline bean',
    ),
    'site_owner' => array(
      'create any timeline bean',
      'delete any timeline bean',
      'edit any timeline bean',
      'view any timeline bean',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}
